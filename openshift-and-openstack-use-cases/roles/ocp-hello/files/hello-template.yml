apiVersion: v1
kind: Template
labels:
  template: hello
  app: ${SERVICE_NAME}
metadata:
  name: hello
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    name: hello
  spec:
    replicas: ${REPLICAS}
    selector:
      app: hello
      deploymentconfig: hello
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: hello
          deploymentconfig: hello
      spec:
        containers:
        - env:
          - name: GREETING
            value: ${GREETING}
          - name: WHO
            value: ${WHO}
          image: hello/hello:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: hello
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - hello
        from:
          kind: ImageStreamTag
          name: hello:latest
          namespace: hello
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: hello
      deploymentconfig: hello
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: ${SERVICE_NAME}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: hello
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: hello:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: https://github.com/andyneeb/hello.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:8
          namespace: openshift
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOKSECRET}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: hello
  spec:
    lookupPolicy:
      local: false
parameters:
  - description: Service name used to loadbalance application pods
    displayName: Service Name
    name: SERVICE_NAME
    required: true
    value: hello
  - description: Memory limit for Application Pod
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 64Mi
  - description: Number of Replicas
    displayName: Replicas
    name: REPLICAS
    required: true
    value: '2'
  - description: Greeting string
    displayName: Greeting
    name: GREETING
    value: Hello
  - description: Whom to greet
    displayName: Who
    name: WHO
    value: World
  - description: >-
      Github trigger secret.  A difficult to guess string encoded as part of the
      webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
