---
## Rocket-Chat + Stateful MongoDB Install

# Create project
- name: check if project {{ project_name }} exists
  shell: "{{ openshift_cli }} get project {{ project_name }}"
  register: rocket_project_result
  ignore_errors: true
  changed_when: false

- name: create project {{ project_name }}
  shell: "{{ openshift_cli }} new-project {{ project_name }} --display-name='{{ project_display_name }}' --description='{{ project_desc }}'"
  when: rocket_project_result|failed

- name: check if service exists
  shell: "{{ openshift_cli }} get service {{ mongodb_service_name }} -n {{ project_name }}"
  register: install_mongodb
  ignore_errors: true
  changed_when: false

- name: remove existing install if clean deployment requested
  shell: |
    {{ openshift_cli }} delete all,statefulset -l template=rocketchat -n {{ project_name }}
    {{ openshift_cli }} delete pvc -l name=mongodb -n {{ project_name }}
  when:
    - install_mongodb|succeeded
    - clean_deploy|bool

- name: deploy rocket
  shell: |
    {{ openshift_cli }} new-app -f {{ role_path }}/files/rocket-template.yaml \
        --param=ROCKET_MEMORY_LIMIT={{ rocket_memory_limit }} \
        --param=MONGODB_SERVICE_NAME={{ mongodb_service_name }} \
        --param=MONGODB_INTERNAL_SERVICE_NAME={{ mongodb_internal_service_name }} \
        --param=MONGODB_DATABASE={{ mongodb_database }} \
        --param=MONGODB_USER={{ mongodb_user }} \
        --param=MONGODB_PASSWORD={{ mongodb_password }} \
        --param=MONGODB_ADMIN_PASSWORD={{ mongodb_admin_password }} \
        --param=MONGODB_REPLICA_NAME={{ mongodb_replica_name }} \
        --param=MONGODB_KEYFILE_VALUE={{ mongodb_keyfile_value }} \
        --param=MONGODB_REPLICAS={{ mongodb_replicas }} \
        --param=MONGODB_MEMORY_LIMIT={{ mongodb_memory_limit }} \
        -n {{ project_name }}
  when: clean_deploy|bool or install_mongodb|failed

- name: get application url
  shell: |
    {{ openshift_cli }} get route rocketchat -o jsonpath='{.spec.host}' -n {{ project_name }}
  register: application_url

- name: wait for application to become ready
  uri:
    url: http://{{ application_url.stdout }}
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
